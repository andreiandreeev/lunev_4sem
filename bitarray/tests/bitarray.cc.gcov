        -:    0:Source:../source/bitarray.cc
        -:    0:Graph:bitarray.gcno
        -:    0:Data:bitarray.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "bitarray.hpp"
        -:    2:#include <algorithm>
        -:    3:#include <functional>
        -:    4:#include <iostream>
        -:    5:
       18:    6:void bitarray::swap(bitarray &lhs, bitarray &rhs) {
       18:    7:    std::swap(lhs.arr_, rhs.arr_);
       18:    8:    std::swap(lhs.size_, rhs.size_);
       18:    9:    std::swap(lhs.chrsize_, rhs.chrsize_);
       18:   10:    std::swap(lhs.capacity_, rhs.capacity_);
       18:   11:}
        -:   12:
       46:   13:bitarray::bitarray(int size, bool filling)
        -:   14:        :
        -:   15:        arr_(nullptr),
        -:   16:        size_(size),
        -:   17:        chrsize_(0),
       46:   18:        capacity_(0)
        -:   19:{
       46:   20:    if(size != 0) {
       44:   21:        if(size < 0)
        2:   22:            throw std::out_of_range("bad size in ctor");
        -:   23:
       42:   24:        arr_        = new uint64_t[(static_cast<int>((size + 63)/ 64))]{};
       38:   25:        chrsize_    = static_cast<int>(size / 64) + 1;
       38:   26:        capacity_   = static_cast<int>(size / 64) + 1;
        -:   27:    }
        -:   28:
       40:   29:    if(filling)
       37:   30:        for(int i = 0; i < capacity_; ++i)
       23:   31:            arr_[i] = 0xFFFFFFFFFFFFFFFF;
       40:   32:}
        -:   33:
      104:   34:bitarray::~bitarray() noexcept {
       52:   35:    delete [] arr_;
       52:   36:}
        -:   37:
       14:   38:bitarray::bitarray(const bitarray &other)
        -:   39:        :
       14:   40:        bitarray(other.size_)
        -:   41:{
       30:   42:    for(int i = 0; i < std::min(capacity_, other.capacity_); ++i)
       18:   43:        arr_[i] = other.arr_[i];
        -:   44:
       12:   45:    size_       = other.size_;
       12:   46:    chrsize_    = other.chrsize_;
       12:   47:}
        -:   48:
        2:   49:bitarray::bitarray(bitarray &&other) noexcept {
        2:   50:    arr_        = other.arr_;
        2:   51:    size_       = other.size_;
        2:   52:    capacity_   = other.capacity_;
        -:   53:
        2:   54:    other.arr_ = nullptr;
        2:   55:}
        -:   56:
        7:   57:bitarray &bitarray::operator=(const bitarray &other) {
        7:   58:    if(this != &other) {
       13:   59:        bitarray tmp(other);
        6:   60:        swap(*this, tmp);
        -:   61:    }
        6:   62:    return *this;
        -:   63:}
        -:   64:
        2:   65:bitarray &bitarray::operator=(bitarray &&other) noexcept {
        2:   66:    swap(*this, other);
        2:   67:    return *this;
        -:   68:}
        -:   69:
      208:   70:void bitarray::push_back(bool expr) {
        -:   71:
      208:   72:    if(size_ == capacity_* 64) {
        6:   73:        if(size_ == 0) {
        8:   74:            bitarray tmp(16);
        -:   75:
        4:   76:            tmp.resize(0);
        4:   77:            tmp.push_back(expr);
        -:   78:
        4:   79:            swap(*this, tmp);
        4:   80:            return;
        -:   81:        }
        -:   82:
        4:   83:        bitarray tmp(capacity_ * 2 * 64);
        4:   84:        for(int i = 0; i < capacity_; ++i)
        2:   85:            tmp.arr_[i] = arr_[i];
        -:   86:
        2:   87:        tmp.size_       = size_;
        2:   88:        tmp.chrsize_    = chrsize_;
        2:   89:        tmp.push_back(expr);
        -:   90:
        2:   91:        swap(*this, tmp);
        2:   92:        return;
        -:   93:    } else {
      202:   94:        ++size_;
      202:   95:        if (static_cast<float>(size_) / 64 > static_cast<float>(chrsize_))
        2:   96:            ++chrsize_;
        -:   97:    }
        -:   98:
      202:   99:    uint32_t bitplace = 0;
        -:  100:
      202:  101:    if (size_ > 64)
       72:  102:        bitplace = size_ - 64 * (chrsize_ - 1);
        -:  103:    else
      130:  104:        bitplace = size_;
        -:  105:
      202:  106:    uint64_t mask = static_cast<uint64_t>(expr) << (64 - bitplace);
        -:  107:
      202:  108:    if(expr)
       68:  109:        arr_[chrsize_ - 1] = arr_[chrsize_ - 1] | mask;
        -:  110:    else
      134:  111:        arr_[chrsize_ - 1] = arr_[chrsize_ - 1] & (~mask);
        -:  112:}
        -:  113:
      216:  114:bool bitarray::operator[](int pos) const {
      216:  115:    if(pos < 0)
        2:  116:        throw std::out_of_range("index can't be negative");
        -:  117:
      214:  118:    uint32_t bitplace = static_cast<uint32_t>(pos % 64);
      214:  119:    uint64_t mask = arr_[static_cast<int>(pos / 64)] << bitplace;
        -:  120:
      214:  121:    mask = mask >> 63U;
      214:  122:    return mask != 0;
        -:  123:}
        -:  124:
     1928:  125:bitarray::proxy bitarray::operator[] (int pos) {
     1928:  126:    if(pos < 0)
        2:  127:        throw std::out_of_range("index can't be negative");
        -:  128:
     1926:  129:    return {arr_[static_cast<int>(pos / 64)],
     1926:  130:            static_cast<uint32_t>(pos % 64)};
        -:  131:}
        -:  132:
       15:  133:void bitarray::resize(int size) {
       15:  134:    if(size < 0)
        2:  135:        throw std::runtime_error("bad size");
        -:  136:
       13:  137:    if(size > capacity_ * 64) {
        9:  138:        bitarray tmp(size);
        8:  139:        for(int i = 0; i < capacity_; ++i)
        4:  140:            tmp.arr_[i] = arr_[i];
        4:  141:        swap(*this, tmp);
        4:  142:        return;
        -:  143:    }
        -:  144:
        8:  145:    if (size_ == 0)
    #####:  146:        chrsize_ = 0;
        -:  147:    else
        8:  148:        chrsize_ = static_cast<int>(size / 64) + 1;
        -:  149:
        8:  150:    size_ = size;
        -:  151:}
        -:  152:
       10:  153:bitarray::iterator bitarray::at(int pos) {
       10:  154:    if(pos >= size_)
        2:  155:        throw std::out_of_range("index greater than size");
        8:  156:    return {*this, pos};
        -:  157:}
        -:  158:
        6:  159:bitarray::const_iterator bitarray::at(int pos) const {
        6:  160:    if(pos >= size_)
        2:  161:        throw std::out_of_range("index greater than size");
        4:  162:    return {*this, pos};
        -:  163:}
        -:  164:
      972:  165:int bitarray::size() const noexcept { return size_; }
        -:  166:
       16:  167:bitarray::iterator bitarray::begin() { return {*this, 0}; }
        -:  168:
       12:  169:bitarray::iterator bitarray::end() { return {*this, size_}; }
        -:  170:
        8:  171:bitarray::const_iterator bitarray::begin() const { return {*this, 0}; }
        -:  172:
        4:  173:bitarray::const_iterator bitarray::end() const { return {*this, size_}; }
        -:  174:
       12:  175:int bitarray::find_bit(int first_bit, int last_bit, uint64_t var, bool elem) {
       12:  176:    if(elem) {
        8:  177:        for(int i = first_bit; i < last_bit; i++)
        6:  178:            if (var & (0x8000000000000000 >> i))
        2:  179:                return i;
        -:  180:    } else {
        8:  181:        for(int i = first_bit; i < last_bit; ++i)
        8:  182:            if ((var & (0x8000000000000000 >> i)) == 0)
        8:  183:                return i;
        -:  184:    }
        -:  185:
        2:  186:    return -1;
        -:  187:}
        -:  188:
       12:  189:int bitarray::find(int first, int last, bool elem) const {
       12:  190:    if ((first >= size_ || first < 0) || (last > size_ || last < 0) || last < first)
        2:  191:        throw std::out_of_range("out of range");
       10:  192:    int nemo = 0;
        -:  193:
        -:  194:    // all intervals [first, last)
        -:  195:
       10:  196:    uint64_t* first_ptr  = arr_ + first / 64;
       10:  197:    uint64_t* last_ptr   = arr_ + last / 64 + static_cast<int>(last % 64 != 0);
        -:  198:
       10:  199:    int first_bit = first % 64;
       10:  200:    int last_bit  = last % 64;
        -:  201:
       10:  202:    if(first_bit != 0) {
        4:  203:        if(first_ptr != last_ptr - 1)
        2:  204:            last_bit = 64;
        4:  205:        if ((nemo = find_bit(first_bit, last_bit, *first_ptr, elem)) != -1)
        2:  206:            return static_cast<int>(first_ptr - arr_) * 64 + nemo;
        -:  207:        else
        2:  208:            ++first_ptr;
        -:  209:    }
        -:  210:
       16:  211:    std::function<bool(uint64_t)> predicat;
        -:  212:
        8:  213:    if(elem)
        6:  214:        predicat = [](uint64_t elem) -> bool {return elem != 0;};
        -:  215:    else
        8:  216:        predicat = [](uint64_t elem) -> bool {return elem != UINT64_MAX;};
        -:  217:
        8:  218:    auto nemo_bay = std::find_if(first_ptr, last_ptr, predicat);
        -:  219:
        8:  220:    if(nemo_bay == last_ptr)
        2:  221:        return -1;
        -:  222:
        6:  223:    if(nemo_bay != last_ptr - 1)
        2:  224:        last_bit = 64;
        -:  225:    else
        4:  226:        last_bit = last % 64;
        -:  227:
        6:  228:    if(nemo_bay != first_ptr)
    #####:  229:        first_bit = 0;
        -:  230:
        6:  231:    nemo = find_bit(first_bit, last_bit, *nemo_bay, elem);
        -:  232:
        6:  233:    if (nemo == -1)
    #####:  234:        return -1;
        -:  235:    else
        6:  236:        return static_cast<int>(first_ptr - arr_) * 64 + nemo;
        -:  237:}
        -:  238:
     1926:  239:bitarray::proxy::proxy(uint64_t &element, uint32_t bitplace)
        -:  240:        :
        -:  241:        element_(element),
     1926:  242:        bitplace_(bitplace)
     1926:  243:{}
        -:  244:
     1854:  245:bitarray::proxy::operator bool() const {
     1854:  246:    uint64_t mask = element_ << bitplace_;
     1854:  247:    mask = mask >> 63U;
     1854:  248:    return mask != 0;
        -:  249:}
        -:  250:
      352:  251:bitarray::proxy &bitarray::proxy::operator=(bool expr) {
      352:  252:    uint64_t mask = static_cast<uint64_t>(true) << (63 - bitplace_);
        -:  253:
      352:  254:    if(expr)
      140:  255:        element_ = element_ | mask;
        -:  256:    else
      212:  257:        element_ = element_ & (~mask);
        -:  258:
        -:  259:
      352:  260:    return *this;
        -:  261:}
        -:  262:
       36:  263:bitarray::iterator::iterator(bitarray &bitarr, int cur_pos)
        -:  264:        :
        -:  265:        bitarr_(bitarr),
       36:  266:        cur_pos_(cur_pos)
       36:  267:{}
        -:  268:
      556:  269:bitarray::iterator &bitarray::iterator::operator++() {
      556:  270:    ++cur_pos_;
      556:  271:    return *this;
        -:  272:}
        -:  273:
        2:  274:bitarray::iterator bitarray::iterator::operator++(int) {
        2:  275:    iterator tmp = *this;
        2:  276:    ++(*this);
        2:  277:    return tmp;
        -:  278:}
        -:  279:
        2:  280:bitarray::iterator &bitarray::iterator::operator--() {
        2:  281:    --cur_pos_;
        2:  282:    return *this;
        -:  283:}
        -:  284:
        2:  285:bitarray::iterator bitarray::iterator::operator--(int) {
        2:  286:    iterator tmp = *this;
        2:  287:    --(*this);
        2:  288:    return tmp;
        -:  289:}
        -:  290:
        4:  291:bitarray::iterator &bitarray::iterator::operator+=(int shift) {
        4:  292:    cur_pos_ += shift;
        4:  293:    return *this;
        -:  294:}
        -:  295:
        4:  296:bitarray::iterator &bitarray::iterator::operator-=(int shift) {
        4:  297:    cur_pos_ -= shift;
        4:  298:    return *this;
        -:  299:}
        -:  300:
      570:  301:bitarray::proxy bitarray::iterator::operator*() { return bitarr_[cur_pos_]; }
        -:  302:
      570:  303:bool bitarray::iterator::operator==(const bitarray::iterator &rhs) {
      570:  304:    return (&bitarr_ == &rhs.bitarr_) && (cur_pos_ == rhs.cur_pos_);
        -:  305:}
        -:  306:
      562:  307:bool bitarray::iterator::operator!=(const bitarray::iterator &rhs) { return !(*this == rhs); }
        -:  308:
       16:  309:bitarray::const_iterator::const_iterator(const bitarray &bitarr, int cur_pos)
        -:  310:        :
        -:  311:        bitarr_(bitarr),
       16:  312:        cur_pos_(cur_pos)
       16:  313:{}
        -:  314:
        2:  315:bitarray::const_iterator &bitarray::const_iterator::operator++() {
        2:  316:    ++cur_pos_;
        2:  317:    return *this;
        -:  318:}
        -:  319:
        2:  320:bitarray::const_iterator bitarray::const_iterator::operator++(int) {
        2:  321:    const_iterator tmp = *this;
        2:  322:    ++(*this);
        2:  323:    return tmp;
        -:  324:}
        -:  325:
        2:  326:bitarray::const_iterator &bitarray::const_iterator::operator--() {
        2:  327:    --cur_pos_;
        2:  328:    return *this;
        -:  329:}
        -:  330:
        2:  331:bitarray::const_iterator bitarray::const_iterator::operator--(int) {
        2:  332:    const_iterator tmp = *this;
        2:  333:    --(*this);
        2:  334:    return tmp;
        -:  335:}
        -:  336:
        4:  337:bitarray::const_iterator &bitarray::const_iterator::operator+=(int shift) {
        4:  338:    cur_pos_ += shift;
        4:  339:    return *this;
        -:  340:}
        -:  341:
        4:  342:bitarray::const_iterator &bitarray::const_iterator::operator-=(int shift) {
        4:  343:    cur_pos_ -= shift;
        4:  344:    return *this;
        -:  345:}
        -:  346:
       10:  347:bool bitarray::const_iterator::operator==(const bitarray::const_iterator &rhs) {
       10:  348:    return (&bitarr_ == &rhs.bitarr_) && (cur_pos_ == rhs.cur_pos_);
        -:  349:}
        -:  350:
        2:  351:bool bitarray::const_iterator::operator!=(const bitarray::const_iterator &rhs) { return !(*this == rhs); }
        -:  352:
       12:  353:bool bitarray::const_iterator::operator*() { return bitarr_[cur_pos_]; }
        -:  354:
        2:  355:bitarray::iterator operator+(int shift, const bitarray::iterator &rhs) {
        2:  356:    auto tmp = rhs;
        2:  357:    return tmp += shift;
        -:  358:}
        -:  359:
        2:  360:bitarray::iterator operator+(const bitarray::iterator &lhs, int shift) {
        2:  361:    return shift + lhs;
        -:  362:}
        -:  363:
        2:  364:bitarray::iterator operator-(const bitarray::iterator &lhs, int shift) {
        2:  365:    auto tmp = lhs;
        2:  366:    return tmp -= shift;
        -:  367:}
        -:  368:
        2:  369:bitarray::const_iterator operator+(int shift, const bitarray::const_iterator &rhs) {
        2:  370:    auto tmp = rhs;
        2:  371:    return tmp += shift;
        -:  372:}
        -:  373:
        2:  374:bitarray::const_iterator operator+(const bitarray::const_iterator &lhs, int shift) {
        2:  375:    return shift + lhs;
        -:  376:}
        -:  377:
        2:  378:bitarray::const_iterator operator-(const bitarray::const_iterator &lhs, int shift) {
        2:  379:    auto tmp = lhs;
        2:  380:    return tmp -= shift;
        6:  381:}
