=======================================
= 08 Распределированное кластерование =
=======================================

-------------
- man 7 tcp -
-------------

Системные вызовы:
man 2 socket
man 2 listen

ClientSide:
sk = socket();
connect(sk, addr, port);

shutdown();

ServerSide:
sk = socket();
listen(sk);
bind(sk, port);

while (1)
{
sk2 = accept(sk);
if (!fork())
...
else continue;
}

shutdown();

---------------

sk = socket(AF_INET, SOCK_STREAM, 0);
err = listen(sk, 256);

struct sockaddr_in addr
{
.sin_family = AF_INET,
.sin_addr = htonl(0x7F000001), (inet_aton("127.0.0.1")) (INET_ANY)
.sin_port = htons(80); // host to network short
};

err = bind(sk, &addr, sizeof(addr));
len = sizeof(addr);
sk = accept(sk, &addr, &len)

-------------
- man 7 udp -
-------------

Отправка:
Можно так:
sk = socket();
sendto(sk, addr, port);

А можно так:
sk = socket();
connect();
write();

Получение:
sk = socket();
- recv();
- recvfrom();
- send();

Discovery - BROADCAST UDP
Process - TCP

================
= Больше о TCP =
================

Безопасность TCP:
- Нет лишних
- Нет потерь
- Данные те же
- Сохранён порядок данных

Размер буфера = размер окна

Что в TCP пакете лежит:
- CRC 32
- seq
- len
- ack
- src.port
- dst.port
- флаги:
- reset флаг = разрыв соединения
- syn = флаг по утсановке соединения
- fin = односторонний обрыв соединения

Установка соединения:
SYN —--->
SYN, ACK <-----
ACK —--->

Закрытие соединения:
FIN —---> (пусть отправлено n пакетов)
FIN, ACK <---— (вот здесь ack на n+1-ый байт)
ACK —--->

Как увидеть пакеты:
- tcpdump
- wireshark

А что в IP пакете:
- IP dst
- IP src
- CRC заголовка
- TTL - количество "жизней" заголовка
- protocol
- flags
- номер фрагмента (если мы резали большой UDP-пакет на маленькие IP пакеты)

Path to MTU Discovery - алгоритм, который проверяет максимальную длину пакета на пути, и исходя из этого выбирает размер TCP-пакета.

Nagle Algorithm:
- Нет неподтверждённых пакетов || Есть пакет полного размера => Отправка пакета
- Есть неподтверждённые пакеты => Ждём

==============================
= Как писать быстрые сервера =
==============================

Скорость memcpy - 4Gb/sec

- read совершает неизбежное КОПИРОВАНИЕ | этих двух копирований можно избежать
- write в socket тоже совершает КОПИРОВАНИЕ | sendfile, splice

- TSO - transmit segmentation offload - Сетевая карта сама разбивает большой пакет на маленькие
- Scatter Gather - Сетевая карта может составлять пакет из разных неподрядидущих страниц
- Свойство чексумм на отправку
- LRO - large recieve offload

ethtool - тулза для проверки сетевой карты
netperf - тулза для проверки сетевого соединения (TCP Stream, TCP RoundRobin)

- Прерывание сетевой картой
- Обработка пакета не в обработчике прерывания, а в Delayed Procedure Call, bottom_half

inter-processor-interrupt - ЭТО ЖОПА
!!! Правило: TCP соединение не должно орабатываться на разных процах

Intel Data Plain Development Kit - штука, чтобы отмапить кольцевой буфер в юзер-спэйс
MPTCP
